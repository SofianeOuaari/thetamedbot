# -*- coding: utf-8 -*-
"""skin cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14wVyF72L7Q2VKucRkxOUpVZI833xcLO9
"""

# mounting the drive cloud for loading the dataset and saving the resaults
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from keras.models import Sequential
from keras import optimizers
from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D
from keras.applications import ResNet50

base_model= ResNet50(include_top=False, weights="imagenet", input_shape=(224,224,3))

model= Sequential()
model.add(base_model)
model.add(Conv2D(64, (3, 3), activation = 'relu'))
model.add(Dropout(0.2))
model.add(Conv2D(64, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(256,activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(2, activation='softmax'))
model.summary()

from keras import optimizers
from keras_preprocessing.image import ImageDataGenerator
train_generator = ImageDataGenerator(rescale = 1./255,
                                     rotation_range=10,  
                                     zoom_range = 0.1, 
                                     width_shift_range=0.1,  height_shift_range=0.1) 
valid_generator = ImageDataGenerator(rescale = 1./255)

training_set = train_generator.flow_from_directory('/content/drive/MyDrive/colab/dataset/skin cancer dataset/data/train',
                                                 target_size = (224,224),
                                                 batch_size = 64,
                                                 class_mode = 'categorical')

valid_set = valid_generator.flow_from_directory('/content/drive/MyDrive/colab/dataset/skin cancer dataset/data/test',
                                            target_size = (224, 224),
                                            batch_size = 64,
                                            class_mode = 'categorical',
                                            shuffle=False)

from keras import optimizers
from keras import backend as K

def recall_m(y_true, y_pred):
    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))
    recall = true_positives / (possible_positives + K.epsilon())
    return recall
model.compile(optimizer=optimizers.Adam(lr=0.001),loss="binary_crossentropy",metrics=["accuracy",recall_m])

from keras.callbacks import ReduceLROnPlateau
learn_control = ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, factor=.5, min_lr=0.0001)

from keras.callbacks import ModelCheckpoint


#filepath="../output/kaggle/working/best_model.h5"
checkpoint = ModelCheckpoint("model.tf", monitor='val_acc', verbose=1, save_best_only=False, mode='max')
callbacks_list = [checkpoint,learn_control]
model.fit_generator(generator=training_set,
                            steps_per_epoch=training_set.samples//training_set.batch_size,
                            validation_data=valid_set,
                            verbose=1,
                            validation_steps=valid_set.samples//valid_set.batch_size,
                            epochs=50,callbacks=callbacks_list)

import tensorflow as tf
saved_model_dir="model.tf"
#model.save("model.tf",overwrite=True)

converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir) 
tflite_model = converter.convert()

# Save the model.
with open('model_skin_cancer_95RECALL.tflite', 'wb') as f:
  f.write(tflite_model)